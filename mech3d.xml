<?xml version="1.0" encoding="UTF-8"?>

<cfsSimulation xmlns="http://www.cfs++.org/simulation" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://www.cfs++.org/simulation 
  https://opencfs.gitlab.io/cfs/xml/CFS-Simulation/CFS.xsd">
  
  <fileFormats>
    <output>
      <hdf5 directory="."/>
      <info/>
    </output>
    <materialData file="mat.xml" format="xml" />
  </fileFormats>

  <domain geometryType="3d">
    <regionList>
      <region material="99lines" name="mech" />
    </regionList>
    <nodeList>
      <!-- the coordinates in CFS++ are not necessarily as expected.
        The idea is that a 2D view with width (x) and height (y) 
        is extended to the third direction depth (z). 
        Hence bottom is y=0 for x,z in [0,1] and bottom is y=1 for x,z in [0,1] -->
      <nodes name="top_center">
        <coord x=".5" y="1.0" z="0.5"/>
      </nodes>
    </nodeList>
  </domain>

    <sequenceStep index="1">
    <analysis>
      <static/>
    </analysis>

    <pdeList>
      <mechanic subType="3d">
        <regionList>
          <region name="mech" />
        </regionList>

        <bcsAndLoads>
           <fix name="left"> 
              <comp dof="x"/> 
              <comp dof="y"/> 
              <comp dof="z"/>
           </fix>
           <!-- apply load on edge. Force is equally distributed -->
           <force name="bottom_right">
             <comp dof="y" value="-1"/>
           </force>
        </bcsAndLoads>

        <storeResults>
          <elemResult type="physicalPseudoDensity">
            <allRegions/>
          </elemResult>
          <elemResult type="mechPseudoDensity">
            <allRegions/>
          </elemResult>
          <nodeResult type="mechDisplacement">
            <allRegions/>
          </nodeResult>
        </storeResults>
      </mechanic>
    </pdeList>

   <linearSystems>
      <system>
      <!-- for lis you need a non-symmetric matrix -->
<!--       <solutionStrategy> -->
<!--         <standard> -->
<!--           <matrix storage="sparseNonSym"/> -->
<!--         </standard> -->
<!--       </solutionStrategy> -->
        <solverList>
          <cholmod/>
        </solverList>
      </system>
    </linearSystems> 
    </sequenceStep> 
  <optimization>
    <costFunction type="compliance" task="minimize" >
      <!-- make this harder when using snopt to use snopt's convergence criteria -->
      <stopping queue="10" value="0.001" type="relativeCostChange"/>
    </costFunction>

    <constraint type="volume" value=".3" bound="upperBound" linear="true" mode="constraint" />
    <constraint type="greyness" mode="observation"  />

    <optimizer type="optimalityCondition" maxIterations="10">
    </optimizer>

    <ersatzMaterial region="mech" material="mechanic" method="simp">
      <filters>
        <filter neighborhood="maxEdge" value="1.3" />
      </filters>

      <design name="density" initial=".3" physical_lower="1e-9" upper="1.0" />

      <transferFunction type="simp" application="mech" param="3"/>

      <export save="last" write="iteration"/>

    </ersatzMaterial>
    <commit mode="each_forward" stride="1"/>
  </optimization>

</cfsSimulation>


